AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  SourceS3BucketName:
    Type: "String"
    Default: "s3-sync-test-src"
  TargetS3BucketName:
    Type: "String"
    Default: "s3-sync-test-target"
  LambdaRoleName:
    Type: "String"
    Default: "s3sync-lambda-executor"
  LambdaFunctionName:
    Type: "String"
    Default: "s3sync-2"

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref LambdaRoleName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        - PolicyName: "AllowS3PutObjectToTarget"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: "Allow"
              Action: "s3:PutObject"
              Resource: !Sub "arn:aws:s3:::${TargetS3BucketName}/*"
        - PolicyName: "AllowS3GetObjectFromSource"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: "Allow"
              Action: "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${SourceS3BucketName}/*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt ["LambdaRole", "Arn"]
      Handler: "index.lambda_handler" # index.lambda_handler rather than lambda_function.lambda_hander, or you cannot edit it inline from Console
      Runtime: "python2.7"
      Code:
        ZipFile: |
          import urllib
          import boto3
          import ast
          import json
          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              source_bucket = str(event['Records'][0]['s3']['bucket']['name'])
              key = str(urllib.unquote_plus(event['Records'][0]['s3']['object']['key']).decode('utf8'))
              target_bucket = "s3-sync-test-target"
              copy_source = {'Bucket':source_bucket, 'Key':key}
              print "Copying %s from bucket %s to bucket %s ..." % (key, source_bucket, target_bucket)
              s3.copy_object(Bucket=target_bucket, Key=key, CopySource=copy_source)

  S3InvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      "Action": "lambda:InvokeFunction"
      "FunctionName": !Ref LambdaFunction
      "Principal": "s3.amazonaws.com"
      "SourceAccount": !Ref AWS::AccountId
      "SourceArn": !Sub "arn:aws:s3:::${SourceS3BucketName}"

Outputs:
  SourceS3BucketName:
    Description: "Arn of Source S3 bucket"
    Value: !Ref SourceS3BucketName
    Export:
      Name: !Sub "${AWS::StackName}-SourceS3BucketName"
  LambdaFunctionArn:
    Description: "Arn of Lambda Function"
    Value: !GetAtt ["LambdaFunction", "Arn"]
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"




